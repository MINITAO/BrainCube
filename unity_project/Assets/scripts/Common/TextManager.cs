using UnityEngine;
using System.Collections;
using System.IO;
 
// originally found in: http://forum.unity3d.com/threads/35617-TextManager-Localization-Script
 
/// <summary>
/// TextManager
/// 
/// Reads PO files into a Hashtable.
/// Look for "PO editors" as that's a standard for translating software.
/// 
/// Example:
/// 
/// load the language file:
///   TextManager.LoadLanguage("helptext-pt-br");
/// 
/// which has to contain at least two lines as such:
///   msgid "HELLO WORLD"
///   msgstr "OLA MUNDO"
/// 
/// then we can retrieve the text by calling:
///   TextManager.GetText("HELLO WORLD");
/// </summary>
public class TextManager : MonoBehaviour {
	private static bool languageLoaded = false;
	private static Hashtable textTable;
	private TextManager () {}

	public static bool LanguageLoaded
	{
		get
		{
			return languageLoaded;
		}
	}

	public static bool LoadLanguage(string fileFullPath)
	{
		if (languageLoaded)
		{
			return false;
		}
		languageLoaded = true;
		if (fileFullPath == null)
		{
			Debug.Log("[TextManager] loading default language.");
			textTable = null; // reset to default
			return false; // this means: call LoadLanguage with null to reset to default
		}
 
		TextAsset textAsset = (TextAsset) Resources.Load(fileFullPath, typeof(TextAsset));
		if (textAsset == null) 
		{
			Debug.LogError("[TextManager] "+ fileFullPath +" file not found.");
			return false;
		}
 
		Debug.Log("[TextManager] loading: "+ fileFullPath);
 
		if (textTable == null) 
		{
			textTable = new Hashtable();
		}
 
		textTable.Clear();
 
		StringReader reader = new StringReader(textAsset.text);
		string key = null;
		string val = null;
		string line;
		while ( (line = reader.ReadLine()) != null)
		{
			if (line.StartsWith("msgid \""))
			{
    			key = line.Substring(7, line.Length - 8);
				//Below line is used to make the \\n in localization file work normally(\\n was generated by localization build script, which should be a bug, not fixed now)
				key = key.Replace("\\n", "\n");
			}
			else if (line.StartsWith("msgstr \""))
			{
    			val = line.Substring(8, line.Length - 9);
				
				while(!string.IsNullOrEmpty(line = reader.ReadLine())) {
					line = line.Replace("\"", "");
					val += line;
				}
				
				//Below line is used to make the \\n in localization file work normally(\\n was generated by localization build script, which should be a bug, not fixed now)
				val = val.Replace("\\n", "\n");
			}
			else
			{
	    		if (key != null && val != null) 
	    		{
	    			// TODO: add error handling here in case of duplicate keys
	    			textTable.Add(key, val);
					key = val = null;
	    		} 
    		}
		}
 
		reader.Close();
 
		return true;
	}
 
 
	public static string GetText (string key)
	{
		if (key != null && textTable != null)
		{
			if (textTable.ContainsKey(key))
			{
				string result = (string)textTable[key];
				if (result.Length > 0)
				{
					key = result;
				}
			}
		}
		return key;
	}
}